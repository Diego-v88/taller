package userInterface;

import controllers.Facade;
import dao.DAOException;
import entities.Company;
import entities.Companyschedule;
import entities.Guard;
import entities.Guardschedule;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

public class NewSchedule extends javax.swing.JDialog {

    private Facade fachada;
    private Object entity;
    private Guard guardData;
    private Company companyData;
    private boolean isUpdate;
    private boolean matrixSchedule[][];

    NewSchedule(java.awt.Frame parent, boolean modal, Guard guard) {
        super(parent, modal);
        componentInCommon();
        entity = guard;
        guardData = guard;
        CB_semana.setEnabled(true);
        LBL_Titulo.setText("Horarios de " + guardData.getFirstname() + " " + guardData.getLastname());
        matrixSchedule = new boolean[Table_Schedule.getRowCount()][Table_Schedule.getColumnCount()];

        try {
            List<Guardschedule> schedules = fachada.getGuardSchedules(guard.getId());
            isUpdate = false;
            if (!schedules.isEmpty()) {
                isUpdate = true;
                DefaultTableModel dtm = (DefaultTableModel) Table_Schedule.getModel();
                schedules.forEach(schedule -> {
                    dtm.setValueAt(true, schedule.getTurntype().getId() - 1, schedule.getDay().getId());
                    matrixSchedule[schedule.getTurntype().getId() - 1][schedule.getDay().getId()] = true;
                });
            }
        } catch (DAOException ex) {
            Logger.getLogger(NewSchedule.class.getName()).log(Level.SEVERE, null, ex);
        }

        CB_semana.addActionListener((ActionEvent e) -> {
            int nRow = Table_Schedule.getModel().getRowCount(), nCol = Table_Schedule.getModel().getColumnCount();
            int franco = CB_semana.getSelectedIndex();

            for (int i = 0; i < matrixSchedule.length; i++) {
                for (int j = 1; j < matrixSchedule[0].length; j++) {
                    if (j == franco) {
                        Table_Schedule.getModel().setValueAt(false, i, j);
                    } else {
                        Table_Schedule.getModel().setValueAt(matrixSchedule[i][j], i, j);
                    }
                }
            }

        });

        Table_Schedule.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                updateMatrix();
            }
        });

        LBL_HorasRestantes.setText("Horas disponibles por semana: " + getTotalTimeSchedule() + " horas");
    }

    NewSchedule(java.awt.Frame parent, boolean modal, Company company) {
        super(parent, modal);
        componentInCommon();
        entity = company;
        companyData = company;
        LBL_Titulo.setText("Horarios de " + companyData.getName() + " en " + companyData.getAddress());

        try {
            isUpdate = false;
            List<Companyschedule> schedules = fachada.getCompanySchedules(company.getId());
            if (!schedules.isEmpty()) {
                isUpdate = true;
                DefaultTableModel dtm = (DefaultTableModel) Table_Schedule.getModel();
                schedules.forEach(schedule -> {
                    dtm.setValueAt(true, schedule.getTurntype().getId() - 1, schedule.getDay().getId());
                });
            }
        } catch (DAOException ex) {
            Logger.getLogger(NewSchedule.class.getName()).log(Level.SEVERE, null, ex);
        }

        LBL_HorasRestantes.setText("Horas a cubrir por semana: " + getTotalTimeSchedule() + " Horas");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void componentInCommon() {
        initComponents();
        fachada = new Facade();
        Table_Schedule.setRowHeight(36);
    }

    private int getTotalTimeSchedule() {
        DefaultTableModel dtm = (DefaultTableModel) Table_Schedule.getModel();
        int count = 0;
        int nRow = dtm.getRowCount(), nCol = dtm.getColumnCount();
        int franco = 0;

        if (entity.getClass() == Guard.class) {
            franco = CB_semana.getSelectedIndex();
        }
        for (int i = 0; i < nRow; i++) {
            for (int j = 1; j < nCol; j++) {
                if (dtm.getValueAt(i, j) != null && dtm.getValueAt(i, j).equals(true)
                        && franco != j) {
                    count += 1;
                }
            }
        }

        return count * 4;
    }

    private void updateMatrix() {
        DefaultTableModel dtm = (DefaultTableModel) Table_Schedule.getModel();
        int nRow = dtm.getRowCount(), nCol = dtm.getColumnCount();
        int franco = CB_semana.getSelectedIndex();
        this.matrixSchedule = new boolean[nRow][nCol];

        for (int i = 0; i < nRow; i++) {
            for (int j = 1; j < nCol; j++) {
                if (dtm.getValueAt(i, j) != null && franco != j) {
                    this.matrixSchedule[i][j] = (boolean) Table_Schedule.getModel().getValueAt(i, j);
                }
            }
        }

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        BTN_CancelSchedule = new javax.swing.JToggleButton();
        BTN_AceptarSchedule = new javax.swing.JButton();
        LBL_Titulo = new javax.swing.JLabel();
        LBL_HorasRestantes = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table_Schedule = new javax.swing.JTable();
        CB_semana = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        BTN_llenartodo = new javax.swing.JButton();
        BTN_limpiar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        BTN_CancelSchedule.setText("Cancelar");
        BTN_CancelSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_CancelScheduleActionPerformed(evt);
            }
        });

        BTN_AceptarSchedule.setText("Aceptar");
        BTN_AceptarSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_AceptarScheduleActionPerformed(evt);
            }
        });

        LBL_Titulo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        LBL_Titulo.setText("Horario de CLASE: Nombre");

        LBL_HorasRestantes.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        LBL_HorasRestantes.setText("Horas disponibles por semana: HORAS");

        Table_Schedule.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Madrugada",  new Boolean(false), null, null, null, null, null, null},
                {"Mañana", null, null, null, null, null, null, null},
                {"Medio día", null, null, null, null, null, null, null},
                {"Siesta", null, null, null, null, null, null, null},
                {"Tarde", null, null, null, null, null, null, null},
                {"Noche", null, null, null, null, null, null, null}
            },
            new String [] {
                "Horario", "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado", "Domingo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        Table_Schedule.setAutoscrolls(false);
        Table_Schedule.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Table_Schedule.setFillsViewportHeight(true);
        Table_Schedule.setPreferredSize(new java.awt.Dimension(613, 216));
        Table_Schedule.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table_ScheduleMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table_Schedule);
        if (Table_Schedule.getColumnModel().getColumnCount() > 0) {
            Table_Schedule.getColumnModel().getColumn(2).setMinWidth(88);
        }

        CB_semana.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CB_semana.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado", "Domingo" }));
        CB_semana.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Dia sin actividad laboral");

        BTN_llenartodo.setText("Llenar todo");
        BTN_llenartodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_llenartodoActionPerformed(evt);
            }
        });

        BTN_limpiar.setText("Limpiar");
        BTN_limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_limpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(LBL_HorasRestantes))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(CB_semana, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 241, Short.MAX_VALUE)
                        .addComponent(BTN_llenartodo)
                        .addGap(90, 90, 90)
                        .addComponent(BTN_limpiar)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparator1)
                        .addComponent(LBL_Titulo)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGap(0, 24, Short.MAX_VALUE)
                            .addComponent(BTN_CancelSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(BTN_AceptarSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE))
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LBL_HorasRestantes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CB_semana, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(BTN_llenartodo)
                    .addComponent(BTN_limpiar))
                .addGap(73, 73, 73))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(LBL_Titulo)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(BTN_CancelSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BTN_AceptarSchedule, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap()))
        );

        jPanel2.setBackground(new java.awt.Color(0, 0, 102));
        jPanel2.setForeground(new java.awt.Color(0, 0, 102));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 396, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BTN_CancelScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_CancelScheduleActionPerformed
        this.dispose();
    }//GEN-LAST:event_BTN_CancelScheduleActionPerformed

    private void BTN_AceptarScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_AceptarScheduleActionPerformed

        if (entity.getClass() == Guard.class) {
            if (CB_semana.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un dia de franco para continuar");
            } else if (getTotalTimeSchedule() < 24) {
                JOptionPane.showMessageDialog(null, "La cantidad minima debe ser de 24 horas");
            } else {
                if (isUpdate) {
                    try {
                        fachada.deleteAllGuardSchedulesByGuard(guardData.getId());
                    } catch (DAOException ex) {
                        Logger.getLogger(NewSchedule.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                List<Guardschedule> schedules = new ArrayList<>();
                DefaultTableModel dtm = (DefaultTableModel) Table_Schedule.getModel();
                int nRow = dtm.getRowCount(), nCol = dtm.getColumnCount();
                for (int i = 0; i < nRow; i++) {
                    for (int j = 0; j < nCol; j++) {
                        if (dtm.getValueAt(i, j) != null && dtm.getValueAt(i, j).equals(true)) {
                            Guardschedule schedule = new Guardschedule((Guard) entity, i + 1, j);
                            schedules.add(schedule);
                        }
                    }
                }
                try {
                    fachada.createGuardSchedules(schedules);
                    JOptionPane.showMessageDialog(null, "Los horarios para el guardia " + guardData.getFirstname() + " han sido guardado con exito", "Nuevo horario de guardia", JOptionPane.INFORMATION_MESSAGE);
                    this.dispose();
                } catch (DAOException ex) {
                    Logger.getLogger(NewSchedule.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else if (entity.getClass() == Company.class) {
            if (isUpdate) {
                try {
                    fachada.deleteAllCompanySchedulesByCompany(companyData.getId());
                } catch (DAOException ex) {
                    Logger.getLogger(NewSchedule.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            List<Companyschedule> schedules = new ArrayList<>();
            DefaultTableModel dtm = (DefaultTableModel) Table_Schedule.getModel();
            int nRow = dtm.getRowCount(), nCol = dtm.getColumnCount();
            for (int i = 0; i < nRow; i++) {
                for (int j = 0; j < nCol; j++) {
                    if (dtm.getValueAt(i, j) != null && dtm.getValueAt(i, j).equals(true)) {
                        Companyschedule schedule = new Companyschedule((Company) entity, i + 1, j);
                        schedules.add(schedule);
                    }
                }
            }
            try {
                fachada.createCompanySchedules(schedules);
                JOptionPane.showMessageDialog(null, "Los horarios para la empresa " + companyData.getName() + " han sido guardado con exito", "Nuevo horario de compania", JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
            } catch (DAOException ex) {
                Logger.getLogger(NewSchedule.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un elemento para contunuar", "Seleccione un elemento", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_BTN_AceptarScheduleActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

    }//GEN-LAST:event_formWindowClosed

    private void Table_ScheduleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table_ScheduleMouseClicked
        LBL_HorasRestantes.setText("Horas disponibles por semana: " + getTotalTimeSchedule() + " Horas");
    }//GEN-LAST:event_Table_ScheduleMouseClicked

    private void BTN_limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_limpiarActionPerformed
        int nRow = Table_Schedule.getModel().getRowCount(), nCol = Table_Schedule.getModel().getColumnCount();
        for (int i = 0; i < nRow; i++) {
            for (int j = 1; j < nCol; j++) {
                Table_Schedule.getModel().setValueAt(false, i, j);
            }
        }
        if (this.entity.getClass() == Guard.class) {
            LBL_HorasRestantes.setText("Horas disponibles por semana: " + getTotalTimeSchedule() + " Horas");
        } else {
            LBL_HorasRestantes.setText("Horas a cubrir por semana: " + getTotalTimeSchedule() + " Horas");
        }
        updateMatrix();
    }//GEN-LAST:event_BTN_limpiarActionPerformed

    private void BTN_llenartodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_llenartodoActionPerformed
        int nRow = Table_Schedule.getModel().getRowCount(), nCol = Table_Schedule.getModel().getColumnCount();
        for (int i = 0; i < nRow; i++) {
            for (int j = 1; j < nCol; j++) {
                if (CB_semana.getSelectedIndex() != j) {
                    Table_Schedule.getModel().setValueAt(true, i, j);
                }
            }
        }
        if (this.entity.getClass() == Guard.class) {
            LBL_HorasRestantes.setText("Horas disponibles por semana: " + getTotalTimeSchedule() + " Horas");
        } else {
            LBL_HorasRestantes.setText("Horas a cubrir por semana: " + getTotalTimeSchedule() + " Horas");
        }
        updateMatrix();
    }//GEN-LAST:event_BTN_llenartodoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewSchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewSchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewSchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewSchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTN_AceptarSchedule;
    private javax.swing.JToggleButton BTN_CancelSchedule;
    private javax.swing.JButton BTN_limpiar;
    private javax.swing.JButton BTN_llenartodo;
    private javax.swing.JComboBox<String> CB_semana;
    private javax.swing.JLabel LBL_HorasRestantes;
    private javax.swing.JLabel LBL_Titulo;
    private javax.swing.JTable Table_Schedule;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
